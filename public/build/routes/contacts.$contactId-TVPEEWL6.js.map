{
  "version": 3,
  "sources": ["../../../app/routes/contacts.$contactId.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/contacts.$contactId.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/contacts.$contactId.tsx\");\n  import.meta.hot.lastModified = \"1730304598751.361\";\n}\n// REMIX HMR END\n\nimport { json } from \"@remix-run/node\";\nimport { Form, useLoaderData, useFetcher } from \"@remix-run/react\";\nimport invariant from \"tiny-invariant\";\nimport { getContact, updateContact } from \"~/data\";\nexport const loader = async ({\n  params\n}) => {\n  invariant(params.contactId, \"Missing contactId param\");\n  const contact = await getContact(params.contactId);\n  if (!contact) {\n    throw new Response(\"Not Found\", {\n      status: 404\n    });\n  }\n  return json({\n    contact\n  });\n};\nexport const action = async ({\n  params,\n  request\n}) => {\n  invariant(params.contactId, \"Missing contactId param\");\n  const formData = await request.formData();\n  return updateContact(params.contactId, {\n    favorite: formData.get(\"favorite\") === \"true\"\n  });\n};\nexport default function Contact() {\n  _s();\n  const {\n    contact\n  } = useLoaderData();\n  return <div id=\"contact\">\n      <div>\n        <img alt={`${contact.first} ${contact.last} avatar`} key={contact.avatar} src={contact.avatar} />\n      </div>\n\n      <div>\n        <h1>\n          {contact.first || contact.last ? <>\n              {contact.first} {contact.last}\n            </> : <i>No Name</i>}{\" \"}\n          <Favorite contact={contact} />\n        </h1>\n\n        {contact.twitter ? <p>\n            <a href={`https://twitter.com/${contact.twitter}`}>\n              {contact.twitter}\n            </a>\n          </p> : null}\n\n        {contact.notes ? <p>{contact.notes}</p> : null}\n\n        <div>\n          <Form action=\"edit\">\n            <button type=\"submit\">\u7DE8\u96C6</button>\n          </Form>\n\n          <Form action=\"destroy\" method=\"post\" onSubmit={event => {\n          const response = confirm(\"\u3053\u306E\u30EC\u30B3\u30FC\u30C9\u3092\u524A\u9664\u3059\u308B\u3053\u3068\u3092\u78BA\u8A8D\u3057\u3066\u304F\u3060\u3055\u3044\u3002\");\n          if (!response) {\n            event.preventDefault();\n          }\n        }}>\n            <button type=\"submit\">\u524A\u9664</button>\n          </Form>\n        </div>\n      </div>\n    </div>;\n}\n_s(Contact, \"fVXFZ2DHJWBPDlTt0dS34HtRFN4=\", false, function () {\n  return [useLoaderData];\n});\n_c = Contact;\nconst Favorite = ({\n  contact\n}) => {\n  _s2();\n  const fetcher = useFetcher();\n  const favorite = fetcher.formData ? fetcher.formData.get(\"favorite\") === \"true\" : contact.favorite;\n  return <fetcher.Form method=\"post\">\n      <button aria-label={favorite ? \"Remove from favorites\" : \"Add to favorites\"} name=\"favorite\" value={favorite ? \"false\" : \"true\"}>\n        {favorite ? \"\u2605\" : \"\u2606\"}\n      </button>\n      </fetcher.Form>;\n};\n_s2(Favorite, \"2WHaGQTcUOgkXDaibwUgjUp1MBY=\", false, function () {\n  return [useFetcher];\n});\n_c2 = Favorite;\nvar _c, _c2;\n$RefreshReg$(_c, \"Contact\");\n$RefreshReg$(_c2, \"Favorite\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
